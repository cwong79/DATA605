b <- c( 1, 2, 6)
C <- matrix(c( 3,  2, -1,
-2,  2,  1,
1,  1,  1), 3, 3, byrow=TRUE)
d <- c( 6, 3, 4)
round(solution(A, b), digits = 2)
round(solution(C, d), digits = 2)
solution <- function(A, b)  {
A <- cbind(A, b)
mult1 = A[2,1] / A[1,1] * A[1,]
A[2,] = A[2,] - mult1
mult2 = A[3,1] / A[1,1] * A[1,]
A[3,] = A[3,] - mult2
mult3 = A[3,2] / A[2,2] * A[2,]
A[3,] = A[3,] - mult3
x3 = (A[3,4] / A[3,3])
x2 = (A[2,4] - A[2,3] * x3) / A[2,2]
x1 = (A[1,4] - A[1,3] * x3 - A[1,2] * x2) / A[1,1]
return(c( x1, x2, x3))
}
A <- matrix(c( 1,  1, 3,
2, -1, 5,
-1, -2, 4), 3, 3, byrow=TRUE)
b <- c( 1, 2, 6)
round(solution(A, b), digits = 2)
solution <- function(A, b)  {
#multipliers
A <- cbind(A, b)
mult1 = A[2,1] / A[1,1] * A[1,]
A[2,] = A[2,] - mult1
mult2 = A[3,1] / A[1,1] * A[1,]
A[3,] = A[3,] - mult2
mult3 = A[3,2] / A[2,2] * A[2,]
A[3,] = A[3,] - mult3
#substitutions
x1 = (A[3,4] / A[3,3])
x2 = (A[2,4] - A[2,3] * x3) / A[2,2]
x3 = (A[1,4] - A[1,3] * x3 - A[1,2] * x2) / A[1,1]
return(c( x1, x2, x3))
}
A <- matrix(c( 1,  1, 3,
2, -1, 5,
-1, -2, 4), 3, 3, byrow=TRUE)
b <- c( 1, 2, 6)
round(solution(A, b), digits = 2)
solution <- function(A, b)  {
#multipliers
A <- cbind(A, b)
mult1 = A[2,1] / A[1,1] * A[1,]
A[2,] = A[2,] - mult1
mult2 = A[3,1] / A[1,1] * A[1,]
A[3,] = A[3,] - mult2
mult3 = A[3,2] / A[2,2] * A[2,]
A[3,] = A[3,] - mult3
#substitution
x3 = (A[3,4] / A[3,3])
x2 = (A[2,4] - A[2,3] * x3) / A[2,2]
x1 = (A[1,4] - A[1,3] * x3 - A[1,2] * x2) / A[1,1]
return(c( x1, x2, x3))
}
A <- matrix(c( 1,  1, 3,
2, -1, 5,
-1, -2, 4), 3, 3, byrow=TRUE)
b <- c( 1, 2, 6)
round(solution(A, b), digits = 2)
knitr::opts_chunk$set(echo = TRUE)
u = c(0.5, 0.5)
v = c(3, -4)
dot(u,v)
knitr::opts_chunk$set(echo = TRUE)
library(pracma)
u = c(0.5, 0.5)
v = c(3, -4)
dot(u,v)
Norm(u)
Norm(v)
(3 * u) - (2 * v)
subspace(u, v) * (180/pi)
solution <- function(A, b)  {
#multipliers
A <- cbind(A, b)
mult1 = A[2,1] / A[1,1] * A[1,]
A[2,] = A[2,] - mult1
mult2 = A[3,1] / A[1,1] * A[1,]
A[3,] = A[3,] - mult2
mult3 = A[3,2] / A[2,2] * A[2,]
A[3,] = A[3,] - mult3
#substitution
x3 = (A[3,4] / A[3,3])
x2 = (A[2,4] - A[2,3] * x3) / A[2,2]
x1 = (A[1,4] - A[1,3] * x3 - A[1,2] * x2) / A[1,1]
#solution
return(c( x1, x2, x3))
}
A <- matrix(c( 1,  1, 3,
2, -1, 5,
-1, -2, 4), 3, 3, byrow=TRUE)
b <- c( 1, 2, 6)
round(solution(A, b), digits = 2)
knitr::opts_chunk$set(echo = TRUE)
library(pracma)
u = c(0.5, 0.5)
v = c(3, -4)
dot(u,v)
Norm(u)
Norm(v)
(3 * u) - (2 * v)
subspace(u, v) * (180/pi)
solution <- function(A, b)  {
#multipliers
A <- cbind(A, b)
mult1 = A[2,1] / A[1,1] * A[1,]
A[2,] = A[2,] - mult1
mult2 = A[3,1] / A[1,1] * A[1,]
A[3,] = A[3,] - mult2
mult3 = A[3,2] / A[2,2] * A[2,]
A[3,] = A[3,] - mult3
#substitution
x3 = (A[3,4] / A[3,3])
x2 = (A[2,4] - A[2,3] * x3) / A[2,2]
x1 = (A[1,4] - A[1,3] * x3 - A[1,2] * x2) / A[1,1]
#solution
return(c( x1, x2, x3))
}
A <- matrix(c( 1,  1, 3,
2, -1, 5,
-1, -2, 4), 3, 3, byrow=TRUE)
b <- c( 1, 2, 6)
round(solution(A, b), digits = 2)
knitr::opts_chunk$set(echo = TRUE)
library(pracma)
u = c(0.5, 0.5)
v = c(3, -4)
dot(u,v)
Norm(u)
Norm(v)
(3 * u) - (2 * v)
subspace(u, v) * (180/pi)
solver <- function(A, b)  {
#multipliers
A <- cbind(A, b)
mult1 = A[2,1] / A[1,1] * A[1,]
A[2,] = A[2,] - mult1
mult2 = A[3,1] / A[1,1] * A[1,]
A[3,] = A[3,] - mult2
mult3 = A[3,2] / A[2,2] * A[2,]
A[3,] = A[3,] - mult3
#substitution
x3 = (A[3,4] / A[3,3])
x2 = (A[2,4] - A[2,3] * x3) / A[2,2]
x1 = (A[1,4] - A[1,3] * x3 - A[1,2] * x2) / A[1,1]
#solution
return(c( x1, x2, x3))
}
A <- matrix(c( 1,  1, 3,
2, -1, 5,
-1, -2, 4), 3, 3, byrow=TRUE)
b <- c( 1, 2, 6)
round(solver(A, b), digits = 2)
LU <- function (M)
{
r = dim(M)[1]
U = M
L = matrix(0,r,r)
for (x in 1:r)
{
L[x,x] = 1
}
M
U
L
for (p in 1:(r-1))
{
for (i in p:(r-1))                            #row
{
mult = ((U[i+1,p])/(U[p,p]))
L[i+1,p] = mult
print (mult)
for (j in p:r)                               #column
{
U[i+1,j] = U[i+1,j] - U[p,j]*mult
}
}
}
U
L
df = data.frame(U,L)
return(df)
}
A = matrix(c(1,2,-1,1,-1,-2,3,5,4),nrow=3,ncol = 3)
LU(A)
LU <- function (M)
{
r = dim(M)[1]
U = M
L = matrix(0,r,r)
for (x in 1:r)
{
L[x,x] = 1
}
M
U
L
for (p in 1:(r-1))
{
for (i in p:(r-1))                            #row
{
mult = ((U[i+1,p])/(U[p,p]))
L[i+1,p] = mult
print (mult)
for (j in p:r)                               #column
{
U[i+1,j] = U[i+1,j] - U[p,j]*mult
}
}
}
LU = list("Lower"=L,"Upper"=U)
return(LU)
}
A = matrix(c(1,2,-1,1,-1,-2,3,5,4),nrow=3,ncol = 3)
LU(A)
LU <- function (M)
{
r = dim(M)[1]
U = M
L = matrix(0,r,r)
for (x in 1:r)
{
L[x,x] = 1
}
M
U
L
for (p in 1:(r-1))
{
for (i in p:(r-1))
{
mult = ((U[i+1,p])/(U[p,p]))
L[i+1,p] = mult
for (j in p:r)
{
U[i+1,j] = U[i+1,j] - U[p,j]*mult
}
}
}
LU = list("Lower"=L,"Upper"=U)
return(LU)
}
A = matrix(c(1,2,-1,1,-1,-2,3,5,4),nrow=3,ncol = 3)
LU(A)
LU <- function (M)
{
r = dim(M)[1]
U = M
L = matrix(0,r,r)
for (x in 1:r)
{
L[x,x] = 1
}
for (p in 1:(r-1))
{
for (i in p:(r-1))
{
mult = ((U[i+1,p])/(U[p,p]))
L[i+1,p] = mult
for (j in p:r)
{
U[i+1,j] = U[i+1,j] - U[p,j] * mult
}
}
}
LU = list("Lower"=L,"Upper"=U)
return(LU)
}
A = matrix(c(1,2,-1,1,-1,-2,3,5,4),nrow=3,ncol = 3)
LU(A)
LU <- function (M)
{
r = dim(M)[1]
U = M
L = matrix(0,r,r) #squaring
for (x in 1:r)
{
L[x,x] = 1
}
for (p in 1:(r-1))
{
for (i in p:(r-1))
{
mult = ((U[i+1,p])/(U[p,p]))
L[i+1,p] = mult
for (j in p:r)
{
U[i+1,j] = U[i+1,j] - U[p,j] * mult
}
}
}
LU = list("Lower"=L,"Upper"=U)
return(round(LU),2)
}
A = matrix(c(1,2,-1,1,-1,-2,3,5,4),nrow=3,ncol = 3)
LU(A)
LU <- function (M)
{
r = dim(M)[1]
U = M
L = matrix(0,r,r) #squaring
for (x in 1:r)
{
L[x,x] = 1
}
for (p in 1:(r-1))
{
for (i in p:(r-1))
{
mult = ((U[i+1,p])/(U[p,p]))
L[i+1,p] = mult
for (j in p:r)
{
U[i+1,j] = U[i+1,j] - U[p,j] * mult
}
}
}
LU = list("Lower"=L,"Upper"=U)
return(round(LU),digits=2)
}
A = matrix(c(1,2,-1,1,-1,-2,3,5,4),nrow=3,ncol = 3)
LU(A)
LU <- function (M)
{
r = dim(M)[1]
U = M
L = matrix(0,r,r) #squaring
for (x in 1:r)
{
L[x,x] = 1
}
for (p in 1:(r-1))
{
for (i in p:(r-1))
{
mult = round(((U[i+1,p])/(U[p,p])), digits = 2)
L[i+1,p] = mult
for (j in p:r)
{
U[i+1,j] = U[i+1,j] - U[p,j] * mult
}
}
}
LU = list("Lower"=L,"Upper"=U)
return(LU)
}
A = matrix(c(1,2,-1,1,-1,-2,3,5,4),nrow=3,ncol = 3)
LU(A)
LU <- function (M)
{
r = dim(M)[1]
U = M
L = matrix(0,r,r) #squaring
for (x in 1:r)
{
L[x,x] = 1
}
for (p in 1:(r-1))
{
for (i in p:(r-1))
{
mult = round(((U[i+1,p])/(U[p,p])), digits = 2)
L[i+1,p] = mult
for (j in p:r)
{
U[i+1,j] = U[i+1,j] - U[p,j] * mult
}
}
}
LU = list("Lower"=L,"Upper"=U)
return(LU)
}
A = matrix(c(1,4,-3,-2,8,5,3,4,7),nrow=3,ncol = 3)
LU(A)
LU <- function (M)
{
r = dim(M)[1]
U = M
L = matrix(0,r,r) #squaring
for (x in 1:r)
{
L[x,x] = 1
}
for (p in 1:(r-1))
{
for (i in p:(r-1))
{
mult = round(((U[i+1,p])/(U[p,p])), digits = 2)
L[i+1,p] = mult
for (j in p:r)
{
U[i+1,j] = U[i+1,j] - U[p,j] * mult
}
}
}
LU = list("Lower"=L,"Upper"=U)
return(LU)
}
A = matrix(c(1,4,-3,-2,8,5,3,4,7), nrow = 3, ncol = 3, byrow = TRUE)
LU(A)
LU <- function(M)
{
r = dim(M)[1]
U = M
L = matrix(0,r,r) #squaring
for (x in 1:r)
{
L[x,x] = 1
}
for (p in 1:(r-1))
{
for (i in p:(r-1))
{
mlt = round(((U[i+1,p])/(U[p,p])), digits = 2)
L[i+1,p] = mlt
for (j in p:r)
{
U[i+1,j] = U[i+1,j] - U[p,j] * mlt
}
}
}
LU = list("Lower" = L,"Upper" = U)
return(LU)
}
A = matrix(c(1,4,-3,-2,8,5,3,4,7), nrow = 3, ncol = 3, byrow = TRUE)
LU(A)
LU <- function(M)
{
r = dim(M)[1]
U = M
L = matrix(0,r,c) #squaring
for (x in 1:r)
{
L[x,x] = 1
}
for (p in 1:(r-1))
{
for (i in p:(r-1))
{
mlt = round(((U[i+1,p])/(U[p,p])), digits = 2)
L[i+1,p] = mlt
for (j in p:r)
{
U[i+1,j] = U[i+1,j] - U[p,j] * mlt
}
}
}
LU = list("Lower" = L,"Upper" = U)
return(LU)
}
A = matrix(c(1,4,-3,-2,8,5,3,4,7), nrow = 3, ncol = 3, byrow = TRUE)
LU(A)
LU <- function(M)
{
r = dim(M)[1]
U = M
L = matrix(0,r,r) #squaring
for (x in 1:r)
{
L[x,x] = 1
}
for (p in 1:(r-1))
{
for (i in p:(r-1))
{
mlt = round(((U[i+1,p])/(U[p,p])), digits = 2)
L[i+1,p] = mlt
for (j in p:r)
{
U[i+1,j] = U[i+1,j] - U[p,j] * mlt
}
}
}
LU = list("Lower" = L,"Upper" = U)
return(LU)
}
A = matrix(c(1,4,-3,-2,8,5,3,4,7), nrow = 3, ncol = 3, byrow = TRUE)
LU(A)
LU <- function(M)
{
r = dim(M)[1]
U = M
L = matrix(0,r,r) #squaring
for (x in 1:r)
{
L[x,x] = 1
}
for (p in 1:(r-1))
{
for (i in p:(r-1))
{
mlt = round(((U[i+1,p])/(U[p,p])), digits = 2)
L[i+1,p] = mlt
for (j in p:r)
{
U[i+1,j] = U[i+1,j] - U[p,j] * mlt
}
}
}
LU = list("Lower" = L,"Upper" = U)
return(LU)
}
A = matrix(c(1,4,-3,-2,8,5,3,4,7), nrow = 3, ncol = 3, byrow = TRUE)
LU(A)
c <- matrix(c(1,2,3,0,4,5,0,0,6),3,3)
eigen(c)
